/********************************************************************************
  31. 统计正整数的个数
  问题描述
  编写一个程序，从键盘先输入n的值，然后输入n个正整数，输出每个数出现的次数
  输入说明
	第一行n（5<n<30）是一个整数，表示要输入整数的个数； 
	第二行是n个整数，每个整数均小于100000 
  输出说明
	按照整数从小到大的顺序依次输出不同的整数及其出现次数，整数和出现次数之间用:分隔.
  输入样例
	12 
	19 223 35 321 2 33 44 223 2 19 2 19
  输出样例
	2:3 
	19:3 
	33:1 
	35:1 
	44:1 
	223:2 
	321:1
 ********************************************************************************/
#include <stdio.h>
int main1()
{
	// 测试 
	//int n = 12, num[30] = {19,223,35,321,2,33,44,223,2,19,2,19},i=0;
	//int n = 3, num[30] = {3,5,5}, i=0;
	//int n = 3, num[30] = {5,5,3}, i=0;
	//int n = 3, num[30] = {5,3,5}, i=0;
	//int n = 3, num[30] = {3,2,1}, i=0;
	//int n = 2, num[30] = {1,1}, i=0;
	int n = 1, num[30] = {2}, i=0;
	
	// 冒泡排序
	int p,q,t;
	for(p = 1; p <= n-1; p++)
	{
	 	for(q = 0; q < n-p; q++)
	 	{
	 		if(num[q] > num[q+1])
	 		{
	 			t = num[q];
	 			num[q] = num[q+1];
	 			num[q+1] = t;
			}
		}
	} 
	
	// 输出,验证排序结果
	printf("输出,验证排序结果\n"); 
	for(i = 0; i < n; i++) printf("%d\t",num[i]);
	printf("\n");
	
	// 判断重复数
	int x,num_i = 0;
	x = num[0]; 
	for(i = 0; i < n; i++)
	{
		if(num[i] == x) num_i++;
		else 
		{
			printf("%d:%d\n",x,num_i);
		    x = num[i]; // 新数 
		    num_i = 1;  // 至少有一个数  
		}	
		
		if (i == n - 1)  // 最后一个数 
			printf("%d:%d\n",x,num_i);
	} 
	
	return 0;
} 

int main()
{
	int n,num[30],i=0;
	scanf("%d",&n);
    while(i < n) 
    { 
	  scanf("%d",&num[i]);
	  i++; 
	} 
	
	// 冒泡排序
	int p,q,t;
	for(p = 1; p <= n-1; p++)
	{
	 	for(q = 0; q < n-p; q++)
	 	{
	 		if(num[q] > num[q+1])
	 		{
	 			t = num[q];
	 			num[q] = num[q+1];
	 			num[q+1] = t;
			}
		}
	} 
	
	// 判断重复数
	int x,num_i = 0;
	x = num[0]; 
	for(i = 0; i < n; i++)
	{
		if(num[i] == x) num_i++;
		else 
		{
			printf("%d:%d\n",x,num_i);
		    x = num[i]; // 新数 
		    num_i = 1;  // 至少有一个数  
		}	
		
		if (i == n - 1)  // 最后一个数 
			printf("%d:%d\n",x,num_i);
	} 
	
	return 0;
} 
