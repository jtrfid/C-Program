/************************************************************************** 
试题编号	25
试题名称	括号匹配
时间限制:	2 秒
内存限制:	10000MB
问题描述	
问题描述
请写一个程序，判断给定表达式中的括号是否匹配。
表达式中的合法括号为“(”、“)”、“[”、“]”、“{”、“}”，这三种括号可以按照任意的次序嵌套使用。
输入说明
有多个表达式，每个表达式占一行。当输入的表达式为空字符串（长度为0）时表示输入结束
输出说明
对每个表达式，若其中的括号是匹配的，则输出“yes”，否则输出“no”。
输入样例
[(d+f)*{}2] 
[(2+3)) 
()} 
[4(6]7)9
[(]) 
[b[(9999)]a]aaa 

输出样例
yes 
no 
no 
no
no
yes
提示信息
 ************************************************************************/
 // 方案1(非递归)：使用数组模拟"栈"结构(是一种"先进后出"的数据结构)，遇左括号"入栈"; 遇右括号"出栈",检测匹配情况。
 // 定义辅助函数实现单一功能，如判断括号类型，根据右括号返回对应的左括号等，简化程序设计。 
 
 // 注意不能通过统计左右括号总数相等的方法，判断是否匹配。如，[4(6]7)9，并不表示匹配 
  
 #include <stdio.h>
 // 估计字符串最大长度，存储有效字符(N-1)个，预留最后一个字符'\0' 
 #define N 100
 
 // 全局变量，使用数组模拟"栈"结构 
 char stack[N];  // 栈(是一种"先进后出"的数据结构) 
 int n = 0;       // 栈中实际元素个数 
 char top = '\0'; // 栈顶元素(stacks[n-1]), if(n == 0) top = '\0' 

 // 左括号入栈 
 void push(char left)
 {
 	stack[n] = left;
 	n++; // 栈中元素个数+1 
 }
 
 // 栈顶元素出栈。如果是空栈, top = '\0' 
 void pop()
 {
 	n--; // 栈中元素个数-1 
	if(n < 0) top = '\0';
 	else top = stack[n];
 }
 
 // 清栈，为下一个字符串比较设置正确的初始值
 void clear()
 {
 	n = 0;        
    top = '\0';  
 }
 
  // 判断字符c的类型。返回1,2,3，分别代表c是左括号、右括号、非括号 
 int cType(char c)
 {
 	if(c == '(' || c == '[' || c == '{')  return 1;
 	if(c == ')' || c == ']' || c == '}')  return 2;
 	return 3;  // 非括号 
 }
 
 // 参数right表示右括号，返回对应的左括号。 
 char left(char right)
 {
 	char c;
	switch(right)
	{
		case ')': c = '('; break;
		case ']': c = '['; break;
		case '}': c = '{'; break;
	}
	return c;
 }
 
 // 检查字符串s的括号匹配情况，匹配返回：1，否则返回：0 
 int check(char s[])
 {	
 	int type;	
	while(*s)
 	{
 		type = cType(*s);
		if(type == 2) // 右括号，需要检查匹配 
		{
 			pop(); // 左括号出栈。正常情况下，栈顶元素应该与(*s)字符匹配
			if(top != left(*s)) return 0; // 不匹配，直接返回0 
		} 
		if(type == 1) push(*s); // 左括号入栈
		s++;	
	}
	if(n > 0) return 0; // 如果此时栈不空，还有未匹配的左括号，因此不匹配。 
	return 1; 
 } 
 
 int main()
 {
	char s[N];
	while(1)
	{
		gets(s);  // 可以接收空串的输入，不能使用scanf("%s",s); 
		if(s[0] == '\0') break;  // 结束循环 
		if (check(s)) printf("yes\n");
		else printf("no\n"); 
		// 清栈，为下一个字符串比较设置正确的初始值
 		clear(); 
	}
 	return 0;
 }
