/************************************************************************** 
试题编号	25
试题名称	括号匹配
时间限制:	2 秒
内存限制:	10000MB
问题描述	
问题描述
请写一个程序，判断给定表达式中的括号是否匹配。表达式中的合法括号为“(”、“)”、“[”、“]”、“{”、“}”，这三种括号可以按照任意的次序嵌套使用。
输入说明
有多个表达式，每个表达式占一行。当输入的表达式为空字符串（长度为0）时表示输入结束
输出说明
对每个表达式，若其中的括号是匹配的，则输出“yes”，否则输出“no”。
输入样例
[(d+f)*{}2] 
[(2+3)) 
()} 
[4(6]7)9
[(]) 
[b[(9999)]a]aaa

输出样例
yes 
no 
no 
no
no
yes
提示信息
 ************************************************************************/
 // 方法2(递归函数)：使用数组模拟"栈"结构(是一种"先进后出"的数据结构)，遇左括号"入栈"; 遇右括号"出栈",检测匹配情况。
 // 栈结构通过递归函数参数传递
 
 // 注意不能通过统计左右括号总数相等的方法，判断是否匹配。如，[4(6]7)9，并不表示匹配 
  
 #include <stdio.h>
 // 估计字符串最大长度，存储有效字符(N-1)个，预留最后一个字符'\0' 
 #define N 100
 
 // 判断字符c的类型。返回1,2,3，分别代表c是左括号、右括号、非括号 
 int cType(char c)
 {
 	if(c == '(' || c == '[' || c == '{')  return 1;
 	if(c == ')' || c == ']' || c == '}')  return 2;
 	return 3;  // 非括号 
 }
 
 // 参数right表示右括号，返回对应的左括号。 
 char left(char right)
 {
 	char c;
	switch(right)
	{
		case ')': c = '('; break;
		case ']': c = '['; break;
		case '}': c = '{'; break;
	}
	return c;
 }
 
 // 检查字符串s的括号匹配情况，匹配返回：1，否则返回：0 
 // stack数组模拟"栈"结构(是一种"先进后出"的数据结构)，遇左括号"入栈"; 遇右括号"出栈",检测匹配情况。
 // 参数n，表示数组stack的实际长度 
 int check(char s[],char stack[],int n)
 { 
	// 递归结束条件 
	if (*s == '\0') // 到字符串s的末尾了 
	{
		if(n == 0) return 1; // 如果此时stack数组长度为0,表示全部匹配 
		else return 0;        // 否则，表示不匹配。 
	} 

    int type = cType(*s);	
    
	if(type == 2)  // 右括号   
	{
		if (n <= 0) return 0; // stack为空，无匹配的左括号，直接返回0 
		if(stack[n-1] != left(*s)) return 0; // 不匹配，直接返回0 
		// 匹配，stack数组长度-1 
		n--;
	} 
	
	if(type == 1) // 左括号
	{
	   stack[n] = *s; 
	   //stack数组长度+1 
	   n++;
	} 
	
	// 递归调用 
	s++;
	return check(s,stack,n); 		 
 } 
 
 int main()
 {
	char s[N],stack[N]; // 定义存储字符串及其左括号的数组 
	while(1)
	{
		gets(s);  // 可以接收空串的输入，不能使用scanf("%s",s); 
		if(s[0] == '\0') break;  // 结束循环 
		if (check(s,stack,0)) printf("yes\n");
		else printf("no\n"); 
	}
 	return 0;
 }
